article : https://medium.com/swlh/how-to-merge-intervals-step-by-step-cb2c1edf1cd0


1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.
Intervals: [[1,4], [2,5], [7,9]]
Output: [[1,5], [7,9]]


bool comp(const vector<int>& vec1, const vector<int>& vec2){
        if(vec1[0] != vec2[0])
            return vec1[0] < vec2[0];
        else
            return vec1[1]<vec2[1];
    } 
    
    
int solve(vector<vector<int>>& intervals) {
    int n = intervals.size();
    int sum = 0;
    if(!n)
        return sum;
    vector<vector<int>> temp;
    if(n==1)
        temp.push_back(intervals[0]);
    else{
        sort(intervals.begin(),intervals.end(),comp);
        int startTime = intervals[0][0];
        int endTime = intervals[0][1];
        for(int i=1;i<n;i++)
        {
            int currStart = intervals[i][0];
            int currEnd = intervals[i][1];
            if(currStart<=endTime)
            {
                endTime = max(endTime,currEnd);
            }
            else
            {
                temp.push_back({startTime,endTime});
                startTime = currStart;
                endTime = currEnd;
            }
        }
        temp.push_back({startTime,endTime});
    }
    
    for(int i=0;i<temp.size();i++)
    {
        sum+=temp[i][1]-temp[i][0]+1;
        // cout<<temp[i][0]<<" "<<temp[i][1]<<"\n";
    }
    return sum;
}





2. Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

class Solution {
public:
        static bool comp(const vector<int>& vec1, const vector<int>& vec2){
        if(vec1[0] != vec2[0])
            return vec1[0] < vec2[0];
        else
            return vec1[1]<vec2[1];
    } 
    
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end(),comp);
        int n = intervals.size();
        int left = 0, right = 1;
        int ans = 0;
        while(right<n)
        {
            if(intervals[left][1]<=intervals[right][0])
            {
                left=right;
                right++;
            }
            else if(intervals[left][1]<=intervals[right][1])
            {
                ans++;
                right++;
            }
            else if(intervals[left][1]>intervals[right][1])
            {
                ans++;
                left = right;
                right++;
            }
        }
        return ans;
    }
};
